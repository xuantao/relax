-- cpp parser work
local BracketType = {
    kAttr = 1,      -- [[attr]]
    kRound = 2,     -- (...)
    kSquare = 3,    -- [...]
    kAngle = 4,     -- <...>
    kBrace = 5,     -- {...}
}

category

1. 全局变量构造、初始化等
2. 函数参数解析、函数调用识别
3. 类型、变量数据结构完善
4. 是否需要识别宏？
5. 预处理指令
6. 捕获一行数据（单行注释、宏换行连接符）
7. 特化模板类

except {
    1. 用编译宏引入的括号不匹配
}

基础结构 {
    category,       -- 类别(unit, namesapce, class, enum, variate, function, preCompile)
    id,             -- 如果是匿名，则根据一定规则生成唯一名称
    isAnonymous,    -- 是否匿名
    tags,           -- 标记
    attrs,          -- 编译属性

    domain,         -- 所属域
    location,
    macroSwitch,    -- 宏开关
}

变量结构 : 基础结构 {
    type,
    id,
    --array,
    initial,    -- 初始值
}

class结构 : 基础结构 {
    isStruct,
    inherits,   -- 继承
    children,   -- 子集
}

function结构 : 基础结构 {
    ret,
    args,
    // 可选标记
    isAbstract,
    isVirtual,
    isFinal,
    isConst,
    isConstExpr,
    isNoExcept,
}

overload : 基础结构 {
    list,   -- 重载列表
}

location {
    file,
    line,
    column,
    pos,
}

TypeKind = {
    kRaw,       -- 原生类型
    kDefine,    -- 自定义类型
    kAlias,     -- using, typedef引用的别名
    kMemberPtr, -- 成员指针{ret, scope}
    kFunction,  -- 函数类型(普通函数、成员函数)
}

type {
    kind,           -- 类型
    id,             -- id
    qualifier,      -- 限定符
    class,          -- 引用类成员
    ret,            -- 返回类型
    paramenters,    -- 参数列表
    array,          -- 数组
}

lexer结构 {
    file,
    soruce,
    cursor,
}

sentence {
    specifier,  -- 说明符
    defType,
    declarator, -- 声明、定义
    constant,   -- 值
}


decl = {
    kind,   -- 类型
    type,   -- 
    seq,    
    attr,   -- 属性

    paramenters,    -- 表示是函数
    memberRef,      -- 表示是成员指针
}

combine {
    kind,   -- 类型
    value,  -- 字符
    range,  -- 范围
}

完善括号识别
1. int (id),
  参数列表、Using语句 -> 函数
  声明语句 -> 变量
2. int id(other)
  参数列表 —> 函数
  声明语句，other如果是类型则为函数，反之为变量初始化


1. 函数属性(const, noexcept, = delete, = default)等
2. 函数返回值后置声明
3. operator完善
4. 声明、定义生成完善
  函数实现？

05-26问题
1. void test_param_func_ptr_10(int(abs_struct))
  无法正确识别参数类型-> int(*)(abs_struct)